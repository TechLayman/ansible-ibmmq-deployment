---
- name: Ensure MQ availability on target server
  shell:
    cmd: "rpm -qa | grep -i MQSeries | wc -l"
    warn: no
  register: packageCount
  changed_when: false

- name: Ensuring binary state on target server
  stat:
    path: "/tmp/ibmmq/{{ mq_target_version }}/repackage"
  register: areBinariesAvailable
  when: user_action != 'Uninstall'

- block:
  - name: Gathering Installed MQ Version
    shell:
      cmd: "{{ mq_binary_path }}/dspmqver | grep Version | awk '{print $2}'"
      warn: no
    register: installedMQVersion
    changed_when: false

  - name: Collecting Installed MQ Base Version
    set_fact:
      installedMQBase: "{{ installedMQVersion.stdout.split('.')[0:3] | join('.') }}"
    when: user_action != 'Uninstall'

  - name: Collecting Targeted MQ Base Version
    set_fact:
      targetedMQbase: "{{ mq_target_version.split('.')[0:3] | join('.') }}"
    when: user_action != 'Uninstall'

  - name: Collecting Installed MQ packages
    shell:
      cmd: "rpm -qa | grep -i mq | awk -F [-] '{print $1}'"
      warn: no
    register: installed_rpms
    changed_when: false
  
  - name: Getting info on Installed MQ patches
    shell:
      cmd: 'rpm -qa | grep MQSeries | grep "\-U"'
      warn: no
    register: isOldFix
    ignore_errors: yes
    changed_when: false
#    when: user_action != 'Uninstall'
  
  - name: Verifying Backup Location
    stat:
      path: "{{ backup_location }}"
    register: isBackupLocation

  - name: Registering Running Queue Managers
    shell:
      cmd: "{{ mq_binary_path }}/dspmq -o all | grep '(Running)' | awk -F'[()]' '{print $2}'"
      warn: no
    register: runningQmgrList
    changed_when: false

  - name: Registering StandAlone Queue Managers
    shell:
      cmd: "{{ mq_binary_path }}/dspmq -o all | grep '(Running)' | grep '(Not permitted)' | awk -F'[()]' '{print $2}'"
      warn: no
    register: standAloneQmgrList
    changed_when: false

  - name: Registering MultiInstance Queue Managers
    shell:
      cmd: "{{ mq_binary_path }}/dspmq -o all | grep '(Running)' | grep '(Permitted)' | awk -F'[()]' '{print $2}'"
      warn: no
    register: multiInstanceQmgrList
    changed_when: false

  - name: Finding the qmgrs data filesystems
    shell:
      cmd: "cat /var/mqm/mqs.ini | grep -i {{ item }} | grep DataPath | awk -F[=] 'END {if ($NR == 0) {print \"/var/mqm/qmgrs/{{ item }}\"} else {print $2}}'"
      warn: no
    with_flattened:
       - "{{ runningQmgrList.stdout_lines }}"
    register: nonDeafultDataStore
    changed_when: false

  - name: Finding the qmgr log filesystems
    shell:
      cmd: "cat {{ item }}/qm.ini | grep LogPath | awk -F[=] '{print $2}'"
      warn: no
    with_items:
       - "{{ nonDeafultDataStore | json_query('results[*].stdout') }}"
    register: qmgrlogfilesystems
    changed_when: false

  when: packageCount.stdout != "0"

- name: Validating install type
  set_fact:
    installType: "NewInstall"
  when: user_action == 'Install' and packageCount.stdout == "0"

- block:
  - name: Checking the possibility of action
    set_fact:
      noAction: "{% if mq_target_version == installedMQVersion.stdout %}{{ true }}{% else %}{{ false }}{% endif %}"
#      noAction: "{{ 'true' if  mq_target_version is version(installedMQVersion.stdout, '==') else 'false' }}"

  - name: Validating Install Type
    set_fact:
      installType: 'Upgrade'
    when: targetedMQbase > installedMQBase

  - name: Validating Install Type
    set_fact:
      installType: 'Fixpack'
    when: targetedMQbase == installedMQBase

  - name: Validating Install Type
    set_fact:
      installType: 'Rollback'
    when: targetedMQbase < installedMQBase

  - name: Validating Install Type
    set_fact:
      installType: 'NoActionRequired'
    when: noAction == true

  when: user_action == 'Install' and packageCount.stdout != "0"

- block:
  - name: creating binary folder on target server
    file:
      path: /tmp/ibmmq/{{ mq_target_version }}
      state: directory

  - name: Extract Binaries
    unarchive:
      src: "{{ mq_tar_location }}"
      dest: "/tmp/ibmmq/{{ mq_target_version }}"
      extra_opts: [--strip-components=1]
    when: isBase.rc == 0

  - name: Extract Binaries
    unarchive:
      src: "{{ mq_tar_location }}"
      dest: "/tmp/ibmmq/{{ mq_target_version }}"
    when: isBase.rc == 1

  when: user_action != 'Uninstall' and areBinariesAvailable.stat.exists  == false

- name: 'Verifying for any running "bip" Processes'
  shell: "ps -ef | grep -i bip | grep -v pts | wc -l"
  changed_when: false
  register: bipCount

#****************** This Block collects info when packageCount is not Zero ********************
- block:
  - name: "Checking Activity Eligibility"
    set_fact:
      proceedActivity: "'Yes', Your Given version contains valid Base packages"
    when: installType == 'NewInstall' and isBase.rc == 0

  - name: "Checking Activity Eligibility"
    set_fact:
      proceedActivity: "'No', Given tar does not contain Base packages"
    when: installType == 'NewInstall' and isBase.rc == 1

  - name: "Checking Activity Eligibility"
    set_fact:
      proceedActivity: "'Yes', Your Given version contains valid Base packages"
    when: installType == 'Upgrade' and isBase.rc == 0

  - name: "Checking Activity Eligibility"
    set_fact:
      proceedActivity: "'No', Given tar does not contain Base packages"
    when: installType == 'Upgrade' and isBase.rc == 1
 
  - name: "Checking Activity Eligibility"
    set_fact:
      proceedActivity: "'Yes', Your Given version contains Valid fix packages"
    when: installType == 'Fixpack' and isBase.rc == 1

  - name: "Checking Activity Eligibility"
    set_fact:
      proceedActivity: "'No', Base is already available, Please provide only fix tar"
    when: installType == 'Fixpack' and isBase.rc == 0

  - name: "Checking Activity Eligibility"
    set_fact:
      proceedActivity: "'Yes, But Action is not required as already same install available on the server"
    when: installType == 'NoActionRequired'

  when: user_action == 'Install' and  packageCount.stdout != "0"


- block:
  - name: Finding the New MQ packages based on Installed package list
    find:
      paths: /tmp/ibmmq/{{ mq_target_version }}
      file_type: file
      use_regex: yes
      patterns: "{{ installed_rpms.stdout_lines }}"
    register: rpm_files

  - name: Listing MQ packages to be installed
    set_fact:
      rpm_list: "{{ rpm_files.files | map(attribute='path') | list}}"
  when: user_action == 'Install' and installType != "NewInstall"

- block:
  - name: "Registering 'mqsiprofile' state"
    stat:
      path: "{{ iib_install_path }}/server/bin/mqsiprofile"
    register: isProfileFound
 
#  - name: Finding the IIB Admin Account
#    shell: "cat /etc/group | grep mqbrkrs | awk -F[:] '{print $4}' | awk -F[,] '{print $1}'"
#    changed_when: false
#    register: iibAdminUser

  - name: Registering Running IIB Nodes if any
    shell: "source {{ iib_install_path }}/server/bin/mqsiprofile > /dev/null;{{ iib_install_path }}/server/bin/mqsilist | grep -Ev 'BIP8071I|BIP1281I|BIP1326I|repetation|completion|=' | awk '{print $4}'"
    become_user: "{{ iibAdminUser }}"
    changed_when: false
    register: nodeList  
    when: isProfileFound.stat.exists == true 
  
  when: bipCount.stdout != "0"


- name: "MQ Facts : "
  debug:
    msg:
    - "Installed version is : {{ installedMQVersion.stdout }}"
    - "Installed base version is : {{ installedMQBase }}"
    - "Targeted MQ Version is : {{ mq_target_version }}"
    - "Targeted MQ Base Version is : {{ targetedMQbase }}"
    - "Is the given version eligible for upgrade  : {{ proceedActivity }}"
    - "Install Type is : {{ installType }}"
    - "List of Running StandAlone Queue managers : {{ standAloneQmgrList.stdout_lines }}"
    - "List of Running Multi Instance Queue Managers : {{ multiInstanceQmgrList.stdout_lines }}"
    - "Qmgrs Datapath : {{ nonDeafultDataStore | json_query('results[*].stdout') }}"
    - "Qmgrs Logpath : {{ qmgrlogfilesystems | json_query('results[*].stdout') }}"
    - "Is backup location available : {{ isBackupLocation.stat.exists }}"
    - "installed package list : {{ installed_rpms.stdout_lines }}"
    - "rpm list which need to be applied : {{ rpm_list }}"
    - "Are {{ mq_target_version }} binaries available on target machine? : {{ areBinariesAvailable.stat.exists }}"
    - "is given version contains base : {{ isBase.rc }}"
  when: packageCount.stdout != "0" and user_action == 'Install'

- debug:
    msg:
    - "Install Type is : {{ installType }}"
    - "is given version contains base : {{ 'True' if isBase.rc == 0 else 'False' }}"
  when: packageCount.stdout == "0" and user_action == "Install"

- debug:
    msg: 
    - "No MQ packages availabel on the machine, Hence no action required"
  when: user_action == 'Uninstall' and packageCount.stdout == "0"

- debug:
    msg:
    - "Installed version is : {{ installedMQVersion.stdout }}"
    - "Installed Package Count: {{ packageCount.stdout }}"
    - "installed package list : {{ installed_rpms.stdout_lines }}"
    - "List of Running StandAlone Queue managers : {{ standAloneQmgrList.stdout_lines }}"
    - "List of Running Multi Instance Queue Managers : {{ multiInstanceQmgrList.stdout_lines }}"
    - "Qmgrs Datapath : {{ nonDeafultDataStore | json_query('results[*].stdout') }}"
    - "Qmgrs Logpath : {{ qmgrlogfilesystems | json_query('results[*].stdout') }}"
    - "Is backup location available : {{ isBackupLocation.stat.exists }}"
    - "status of fix installation : {{ isOldFix.rc }}"
  when: user_action == 'Uninstall' and packageCount.stdout != "0"

- name: "IIB Facts : "
  debug:
    msg:
    - "IIB running processes : {{ bipCount.stdout }}"
    - "IIB Admin user is : {{ iibAdminUser }}"
    - "Running integration node list is  : {{ nodeList.stdout_lines }}"
    - "Is given iib path correct : {{ isProfileFound.stat.exists }}"
  when: packageCount.stdout != "0" and bipCount.stdout != "0"

